# define quartile functions to use with ggplot2 stat_summary
# GAR, University of Glasgow, 2016-07-07
plot.q1 <- function(x){
  m <- hd(x,.25)
  c(y = m, ymin = m, ymax = m)
}
plot.q2 <- function(x){
  m <- hd(x,.5)
  c(y = m, ymin = m, ymax = m)
}
plot.q3 <- function(x){
  m <- hd(x,.75)
  c(y = m, ymin = m, ymax = m)
}

plot.q123 <- function(x){
c(y = hd(x,.5), ymin = hd(x,.25), ymax = hd(x,.75))
}

plot.quartiles <- function(p,colour="grey70", width=.5){
p <- p + stat_summary(fun.data="plot.q1", geom="errorbar", colour=colour, width=width, size=1) +
  stat_summary(fun.data="plot.q2", geom="errorbar", colour=colour, width=width, size=2) +
  stat_summary(fun.data="plot.q3", geom="errorbar", colour=colour, width=width, size=1)
p
}

# define decile functions to use with ggplot2 stat_summary
# GAR, University of Glasgow, 2016-07-09
plot.d1 <- function(x){
  m <- hd(x,.1)
  c(y = m, ymin = m, ymax = m)
}
plot.d2 <- function(x){
  m <- hd(x,.2)
  c(y = m, ymin = m, ymax = m)
}
plot.d3 <- function(x){
  m <- hd(x,.3)
  c(y = m, ymin = m, ymax = m)
}
plot.d4 <- function(x){
  m <- hd(x,.4)
  c(y = m, ymin = m, ymax = m)
}
plot.d5 <- function(x){
  m <- hd(x,.5)
  c(y = m, ymin = m, ymax = m)
}
plot.d6 <- function(x){
  m <- hd(x,.6)
  c(y = m, ymin = m, ymax = m)
}
plot.d7 <- function(x){
  m <- hd(x,.7)
  c(y = m, ymin = m, ymax = m)
}
plot.d8 <- function(x){
  m <- hd(x,.8)
  c(y = m, ymin = m, ymax = m)
}
plot.d9 <- function(x){
  m <- hd(x,.9)
  c(y = m, ymin = m, ymax = m)
}

stat_summary_deciles <- function(p,cc="grey80",width=0.5,size.d=1,size.md=2){
# add deciles to plot using stat_summary
# GAR, University of Glasgow, 2016-07-15
p <- p + stat_summary(fun.data="plot.d1", geom="errorbar", colour=cc, width=width, size=size.d) +
  stat_summary(fun.data="plot.d2", geom="errorbar", colour=cc, width=width, size=size.d) +
  stat_summary(fun.data="plot.d3", geom="errorbar", colour=cc, width=width, size=size.d) +
  stat_summary(fun.data="plot.d4", geom="errorbar", colour=cc, width=width, size=size.d) +
  stat_summary(fun.data="plot.d5", geom="errorbar", colour=cc, width=width, size=size.md) +
  stat_summary(fun.data="plot.d6", geom="errorbar", colour=cc, width=width, size=size.d) +
  stat_summary(fun.data="plot.d7", geom="errorbar", colour=cc, width=width, size=size.d) +
  stat_summary(fun.data="plot.d8", geom="errorbar", colour=cc, width=width, size=size.d) +
  stat_summary(fun.data="plot.d9", geom="errorbar", colour=cc, width=width, size=size.d)
p
}

annotate.quartiles <- function(p,data,x=0,hjust=0,vjust=0,size=10){
# add text annotation of quartiles using ggplot2 annotate
# GAR, University of Glasgow, 2016-07-07
hdq = c(hd(out,.25),hd(out,.5),hd(out,.75)) # compute quartiles
caption <- as.character(round(hdq, digits=2)) # turn into characters
p <- p + annotate("text", x = x, y = hdq[1], label = caption[1],
                  hjust = hjust, vjust = vjust, size = size) +
         annotate("text", x = x, y = hdq[2], label = caption[2],
                  hjust = hjust, vjust = vjust, size = size) +
         annotate("text", x = x, y = hdq[3], label = caption[3],
                  hjust = hjust, vjust = vjust, size = size)
p
}

plot.sf <- function(data=df){
# Plot shift function using output from shifthd or shiftdhd
# GAR, University of Glasgow, 2016-07-09
ylim <- max(max(abs(data$ci_upper)),max(abs(data$ci_lower)))
ylim <- c(-ylim,ylim)
xintercept <- data[5,1] # get median of group 1
#xbreaks <- data[,1] # get deciles of group 1
xplot = names(data)[1]
xlabel = paste(toupper(substr(xplot,1,1)),substr(xplot,2,nchar(xplot)-1),sep="")
xlabel = paste(xlabel,substr(xplot,nchar(xplot),nchar(xplot)),"quantiles",sep=" ")
  p <- ggplot(data, aes_string(x=xplot, y="difference")) +
  geom_hline(yintercept=0,linetype=2,alpha=0.5) + # x=0 reference line
  geom_vline(xintercept=xintercept,linetype=2,alpha=0.5) + # y=median reference line
  geom_linerange(aes(ymin=ci_lower, ymax=ci_upper), colour="#009E73") +
  geom_line(colour="#009E73", linetype="solid", size=1.5) +
  geom_point(colour="#009E73", size=4, shape=21, fill="white") + #999999
  xlab(xlabel) +
  ylab("Quantile differences") +
  theme_grey() +
  theme(axis.text.x = element_text(size=14),
        axis.text.y = element_text(size=14),
        axis.title.x = element_text(size=16,face="bold"),
        axis.title.y = element_text(size=16,face="bold")) +
  scale_y_continuous(limits = ylim) #+
  #scale_x_continuous(breaks = xbreaks)
p
}

plot.kde_rug_dec2 <- function(data=df){
# Plot kernel density estimates + rug plots + superimposed deciles
# for 2 groups stored in a data frame
# GAR, University of Glasgow, 2016-07-09
require(plyr)
cdat <- ddply(data, "gr", summarise, deciles=q1469(data))
hd05 <- ddply(data, "gr", summarise, hd=hd(data,0.5))
cc <- "grey80" # colour to plot deciles
p <- ggplot(data, aes(x=data, fill=gr)) + geom_density(alpha=.3) +
  facet_grid(gr ~ .) +
  geom_vline(data=hd05, aes(xintercept=hd,  colour=gr),
           linetype="solid", size=2, alpha=.5) + # thicker median
  geom_vline(data=cdat, aes(xintercept=deciles,  colour=gr),
           linetype="solid", size=1, alpha=.5) +
  geom_rug() +
  theme(legend.position="none",
        axis.text.x = element_text(size=14),
        axis.text.y = element_text(size=14),
        axis.title.x = element_text(size=16,face="bold"),
        axis.title.y = element_text(size=16,face="bold"),
        strip.text.y = element_text(size = 20, colour = "white"),
        strip.background = element_rect(colour="darkgrey", fill="darkgrey")) +
        ylab("Density")
p
}

plot.kde_rug_dec1 <- function(data=df,fill.colour="grey30",fill.alpha=.3){
# Plot kernel density estimate + rug plot + superimposed deciles
# for 1 group stored in a data frame
# GAR, University of Glasgow, 2016-07-11
require(plyr)
cdat <- ddply(data, "gr", summarise, deciles=q1469(data))
hd05 <- ddply(data, "gr", summarise, hd=hd(data,0.5))
cc <- "grey80" # colour to plot deciles
p <- ggplot(data, aes(x=data)) +
  geom_density(alpha=fill.alpha,fill=fill.colour,colour="black") +
  geom_vline(xintercept=hd05$hd, colour="black", linetype="solid",
             size=2, alpha=0.5) + # thicker median
  geom_vline(data=cdat, aes(xintercept=deciles),
           linetype="solid", size=1, alpha=.5, colour="black") +
  geom_rug() +
  theme(legend.position="none",
        axis.text.x = element_text(size=14),
        axis.text.y = element_text(size=14),
        axis.title.x = element_text(size=16,face="bold"),
        axis.title.y = element_text(size=16,face="bold")) +
        ylab("Density")
p
}

plot.scat_dec <- function(data=df,size=4, stroke=1, flip=FALSE){
# Plot stripchart (1D scatterplot) + superimposed deciles
# for groups stored in a data frame
# GAR, University of Glasgow, 2016-07-09
p <- ggplot(data, aes(x=gr, y=data, fill=gr, colour=gr, shape=gr))
p <- stat_summary_deciles(p,cc="grey80",width=0.5,size.d=1,size.md=2)
  #geom_dotplot(binaxis='y', stackdir='center', method="histodot", dotsize=dotsize,binwidth=binwidth, alpha=.5) +
  p <- p + geom_jitter(position=position_jitter(0.3), size=size, stroke=stroke, alpha=.5) +
  theme_bw() +
  scale_colour_manual(values = c("grey5","grey5")) +
  scale_shape_manual(values=c(21,21)) +
  theme(legend.position="none") +
  theme(axis.title.x = element_text(size=16,face="bold"),
        axis.title.y = element_text(size=16,face="bold"),
        axis.text.x = element_text(size=14),
        axis.text.y = element_text(size=14))
        if (flip){
  p <- p + coord_flip()
  }
p
}

plot.diff_asym <- function(data=df){
# Plot difference asymmetry plot using output from
# Rand Wilcox's qwmwhd or difQpci functions
# GAR, University of Glasgow, 2016-07-13
ylim <- max(max(abs(data$ci.up)),max(abs(data$ci.low)))
ylim <- c(-ylim,ylim)
  p <- ggplot(data, aes_string(x="quantile", y="SUM")) +
  geom_hline(yintercept=0,linetype=2,alpha=0.5) + # x=0 reference line
  geom_linerange(aes(ymin=ci.low, ymax=ci.up), colour="#009E73") +
  geom_line(colour="#009E73", linetype="solid", size=1.5) +
  geom_point(colour="#009E73", size=4, shape=21, fill="white") + #999999
  xlab("Quantiles") +
  ylab("Quantile sum = q + 1-q") +
  theme_grey() +
  theme(axis.text.x = element_text(size=14),
        axis.text.y = element_text(size=14),
        axis.title.x = element_text(size=16,face="bold"),
        axis.title.y = element_text(size=16,face="bold")) +
  scale_y_continuous(limits = ylim) +
  scale_x_continuous(breaks = data$quantile)
p
}

plot.deciles <- function(out=out,plotzero=TRUE,xtitle="Differences",hjust=-.05,vjust=.2,size=6){
# Plot deciles and their confidence intervals
# using the output of `deciles_pbci` from `wilcox_modified.txt`
# GAR, University of Glasgow, 2016-07-15
md <- out$est_q[5] # median
md.c <- as.character(round(md, digits=2)) # turn into characters
lo.c <- as.character(round(out$ci.low[5], digits=2)) # turn into characters
up.c <- as.character(round(out$ci.up[5], digits=2)) # turn into characters
caption <- paste("Median = \n ",md.c," [",lo.c,", ",up.c,"]",sep="")
p <- ggplot(data=out, aes(x=quantile*10, y=est_q)) +
  geom_abline(intercept = md, slope = 0,colour="black",size=.5,linetype=2)
  if (plotzero){
  p <- p + geom_abline(intercept = 0, slope = 0,colour="black",size=.5,linetype=1)
  }
  p <- p + geom_linerange(aes(ymin=ci.low, ymax=ci.up), colour="#009E73",size=1) +
  geom_point(colour="#009E73", size=4, shape=21, fill="white") +
  theme_grey() +
  labs(x="Deciles") +
  labs(y=xtitle) +
  theme(axis.text.x = element_text(size=14),
        axis.text.y = element_text(size=14),
        axis.title.x = element_text(size=16,face="bold"),
        axis.title.y = element_text(size=16,face="bold")) +
  scale_x_continuous(breaks=seq(1,9,1)) +
  annotate("text", x = 5, y = out$ci.up[5], label = caption[1],
                  hjust = hjust, vjust = vjust, size = size) +
  coord_flip()
p
}

# ----------------------------------------------------------------------------
scat_paired_obs <- function(df=df,xname="condition1",yname="condition2",min.x=NA,min.y=NA,max.x=NA,max.y=NA,axis.steps=2){
# Scatterplot of paired observations +
# no effect reference line +
# quartiles of each condition
# input is a data frame with 3 columns: participant, condition1, condition 2
# GAR, University of Glasgow, 2016-07-15

# make data.frames for plotting quartile segments
hd1.5<-hd(df[,2],.5)
hd1.25<-hd(df[,2],.25)
hd1.75<-hd(df[,2],.75)
hd2.5<-hd(df[,3],.5)
hd2.25<-hd(df[,3],.25)
hd2.75<-hd(df[,3],.75)
df.5<-data.frame(hd1=hd1.5,hd2=hd2.5)
df.25<-data.frame(hd1=hd1.25,hd2=hd2.25)
df.75<-data.frame(hd1=hd1.75,hd2=hd2.75)

if (is.na(min.x)){
min.x <- min(df[,2],df[,3])
}
if (is.na(max.x)){
max.x <- max(df[,2],df[,3])
}
if (is.na(min.y)){
min.y <- min(df[,2],df[,3])
}
if (is.na(max.y)){
max.y <- max(df[,2],df[,3])
}

# scatterplot of paired observations -----------------
p <- ggplot(df, aes_string(x=xname,y=yname)) +
  geom_abline(intercept = 0) +
  geom_point(size=5,stroke=1,shape=21,colour="black",fill="#ffb347",alpha=.5) +
  theme_bw() +
  theme(axis.text.x = element_text(colour="grey20",size=16),
        axis.text.y = element_text(colour="grey20",size=16),
        axis.title.x = element_text(colour="grey20",size=18),
        axis.title.y = element_text(colour="grey20",size=18),
        legend.title = element_blank(),
        plot.title = element_text(colour="grey20",size=20)) +
  labs(title="Paired observations") +
  scale_x_continuous(limits=c(floor(min.x), ceiling(max.x)),breaks=seq(floor(min.x),ceiling(max.x),axis.steps)) +
  scale_y_continuous(limits=c(floor(min.y), ceiling(max.y)),breaks=seq(floor(min.y),ceiling(max.y),axis.steps)) +
  geom_segment(aes(x=hd1,y=min.y,xend=hd1,yend=hd2),data=df.5,linetype="dashed",size=1,alpha=.5,colour="black") +
  geom_segment(aes(x=hd1,y=min.y,xend=hd1,yend=hd2),data=df.25,linetype="dashed",size=.5,alpha=.5,colour="black") +
  geom_segment(aes(x=hd1,y=min.y,xend=hd1,yend=hd2),data=df.75,linetype="dashed",size=.5,alpha=.5,colour="black") +
  geom_segment(aes(x=min.x,y=hd2,xend=hd1,yend=hd2),data=df.5,linetype="dashed",size=1,alpha=.5,colour="black") +
  geom_segment(aes(x=min.x,y=hd2,xend=hd1,yend=hd2),data=df.25,linetype="dashed",size=.5,alpha=.5,colour="black") +
  geom_segment(aes(x=min.x,y=hd2,xend=hd1,yend=hd2),data=df.75,linetype="dashed",size=.5,alpha=.5,colour="black")

#   geom_vline(xintercept=hd(df$condition1,.5),linetype="dashed", size=1, alpha=.3, colour="black") +
#   geom_vline(xintercept=hd(df$condition1,.25),linetype="dashed", size=.5, alpha=.3, colour="black") +
#   geom_vline(xintercept=hd(df$condition1,.75),linetype="dashed", size=.5, alpha=.3, colour="black") +
#   geom_hline(yintercept=hd(df$condition2,.5),linetype="dashed", size=1, alpha=.3, colour="black") +
#   geom_hline(yintercept=hd(df$condition2,.25),linetype="dashed", size=.5, alpha=.3, colour="black") +
#   geom_hline(yintercept=hd(df$condition2,.75),linetype="dashed", size=.5, alpha=.3, colour="black")
p
}
# ----------------------------------------------------------------------------
